---
- name: Install basic packages
  yum: 
    state: present 
    name:  
      - epel-release
      - screen
      - vim
      - openssl
      - net-tools
      - nmap
      - wget
      - curl
      - unzip
      - rsync
      - mlocate
      - telnet
  environment:
        http_proxy: '{{ vars.http_proxy }}'
        https_proxy: '{{ vars.http_proxy }}'
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'


- name: Install additional packages
  yum: 
    state: present 
    name:
      - glances
      - htop
      - jq
  environment:
    http_proxy: '{{ vars.http_proxy }}'
    https_proxy: '{{ vars.http_proxy }}'
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Install basic packages
  yum: 
    state: present 
    name:  
      - screen
      - vim
      - openssl
      - net-tools
      - nmap
      - wget
      - curl
      - unzip
      - rsync
      - mlocate
      - telnet
  environment:
        http_proxy: '{{ vars.http_proxy }}'
        https_proxy: '{{ vars.http_proxy }}'
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Install additional packages
  yum: 
    state: present 
    name:
      - glances
      - htop
      - jq
  environment:
        http_proxy: '{{ vars.http_proxy }}'
        https_proxy: '{{ vars.http_proxy }}'
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: check if rancher container is already there
  shell: docker ps -a
  register: result
  

- name: create rancher master container
  shell: docker run -d --restart=unless-stopped -p 80:80 -p 443:443 -e HTTP_PROXY="'{{ vars.http_proxy }}'" -e HTTPS_PROXY="'{{ vars.http_proxy }}'" -e NO_PROXY="localhost,127.0.0.1,10.0.0.0/8,172.20.0.0/16" rancher/rancher || true
  # when: result.stdout.find('rancher') != -1
  

- name: create cluster init file
  template:
    src: 'cluster_init.sh.j2'
    dest: '/usr/local/bin/cluster_init.sh'
    owner: root
    mode: 0750

- name: get cluster setup command
  shell: '/usr/local/bin/cluster_init.sh'
  register: cluster_result

- name: get output from cluster result
  debug: 
    var: cluster_result.stdout_lines

- name: set cluster_command fact
  set_fact: 
    cluster_command: '{{ cluster_result.stdout }}'

- name: join the master to the cluster
  shell: "{{cluster_command}} --etcd --controlplane"



